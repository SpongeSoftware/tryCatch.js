name: Release and Publish

on:
  push:
    tags:
      - "v*.*.*" # Triggers on version tags like v1.0.0
  workflow_dispatch: # Allow manual triggering
    inputs:
      version:
        description: "Version to publish (e.g., 1.0.0)"
        required: true
        type: string
      prerelease:
        description: "Mark as prerelease"
        required: false
        type: boolean
        default: false
      dry_run:
        description: "Perform a dry run (skip actual publishing)"
        required: false
        type: boolean
        default: false

permissions:
  contents: write # Required for creating releases
  packages: write # Required for npm publishing (if using GitHub Packages)
  id-token: write # Required for npm provenance

jobs:
  release:
    name: Build, Generate SBOM, and Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for release notes

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Extract version from tag or input
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "tag=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "prerelease=${{ github.event.inputs.prerelease }}" >> $GITHUB_OUTPUT
            echo "dry_run=${{ github.event.inputs.dry_run }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "dry_run=false" >> $GITHUB_OUTPUT
          fi

      - name: Extract and validate current version
        id: current_version
        run: |
          if [ ! -f "package.json" ]; then
            echo "‚ùå package.json not found"
            exit 1
          fi

          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if [ -z "$CURRENT_VERSION" ] || [ "$CURRENT_VERSION" = "undefined" ]; then
           echo "‚ùå No version found in package.json"
           exit 1
          fi

          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Current version: $CURRENT_VERSION"

      - name: Validate version bump
        if: github.event_name == 'workflow_dispatch'
        run: |
          CURRENT="${{ steps.current_version.outputs.current }}"
          TARGET="${{ steps.version.outputs.version }}"
          
          if [ "$CURRENT" = "$TARGET" ]; then
            echo "‚ÑπÔ∏è Version unchanged: $CURRENT"
          elif npx semver "$TARGET" -r ">$CURRENT"; then
            echo "‚úÖ Valid version bump: $CURRENT ‚Üí $TARGET"
          else
            echo "‚ùå Invalid version: $TARGET is not greater than $CURRENT"
            exit 1
          fi

      - name: Update package.json version if needed
        if: github.event_name == 'workflow_dispatch'
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.current }}"
          TARGET_VERSION="${{ steps.version.outputs.version }}"

          if [ "$CURRENT_VERSION" = "$TARGET_VERSION" ]; then
            echo "‚úÖ Version already matches: $CURRENT_VERSION"
          else
            echo "üîÑ Updating version: $CURRENT_VERSION ‚Üí $TARGET_VERSION"
            npm version $TARGET_VERSION --no-git-tag-version
            echo "‚úÖ Version updated successfully"
          fi

      - name: Run linting
        run: pnpm lint

      - name: Run type checking
        run: pnpm type-check

      - name: Run tests
        run: pnpm test --if-present

      - name: Clean previous builds
        run: |
          rm -rf dist/
          echo "üßπ Cleaned previous build artifacts"

      - name: Build package
        run: |
          pnpm build
          echo "üèóÔ∏è Build completed successfully"

      - name: Verify build output
        run: |
          if [ ! -d "dist" ]; then
            echo "‚ùå dist directory not found after build"
            exit 1
          fi
          
          echo "üìÅ Build output verification:"
          ls -la dist/
          
          # Check for essential files based on package.json
          MAIN_FILE=$(node -p "require('./package.json').main || 'index.js'")
          MODULE_FILE=$(node -p "require('./package.json').module || ''")
          TYPES_FILE=$(node -p "require('./package.json').types || ''")
          
          if [ -n "$MAIN_FILE" ] && [ ! -f "$MAIN_FILE" ]; then
            echo "‚ö†Ô∏è Main file not found: $MAIN_FILE"
          fi
          
          if [ -n "$MODULE_FILE" ] && [ ! -f "$MODULE_FILE" ]; then
            echo "‚ö†Ô∏è Module file not found: $MODULE_FILE"
          fi
          
          if [ -n "$TYPES_FILE" ] && [ ! -f "$TYPES_FILE" ]; then
            echo "‚ö†Ô∏è Types file not found: $TYPES_FILE"
          fi
          
          echo "‚úÖ Build verification completed"

      - name: Create package tarball
        run: |
          pnpm pack
          echo "üì¶ Package tarball created"

      - name: Rename and verify tarball
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name.replace('@', '').replace('/', '-')")
          ORIGINAL_TARBALL=$(ls *.tgz | head -1)
          NEW_TARBALL="${PACKAGE_NAME}-${{ steps.version.outputs.version }}.tgz"
          
          if [ -f "$ORIGINAL_TARBALL" ]; then
            mv "$ORIGINAL_TARBALL" "$NEW_TARBALL"
            echo "tarball_name=$NEW_TARBALL" >> $GITHUB_OUTPUT
            echo "‚úÖ Tarball renamed: $ORIGINAL_TARBALL ‚Üí $NEW_TARBALL"
            
            # Verify tarball contents
            echo "üìã Tarball contents:"
            tar -tzf "$NEW_TARBALL" | head -20
          else
            echo "‚ùå No tarball found"
            exit 1
          fi
        id: tarball

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0

      - name: Generate SBOM files
        run: |
          echo "üîç Generating SBOM files..."
          syft packages . -o spdx-json=sbom.spdx.json
          syft packages . -o cyclonedx-json=sbom.cyclonedx.json
          syft packages . -o table=sbom.txt
          
          echo "üìä SBOM generation completed:"
          ls -la sbom.*

      - name: Generate release notes
        id: release_notes
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            const fs = require('fs');
            
            // Get the previous tag
            let previousTag;
            try {
              previousTag = execSync('git describe --tags --abbrev=0 HEAD^', { encoding: 'utf8' }).trim();
            } catch (error) {
              console.log('No previous tag found, using all commits');
              previousTag = '';
            }

            // Generate commit log
            const range = previousTag ? `${previousTag}..HEAD` : 'HEAD';
            let commits;
            try {
              commits = execSync(`git log ${range} --pretty=format:"- %s (%h)" --no-merges`, { encoding: 'utf8' });
            } catch (error) {
              commits = 'No changes found';
            }
            
            // Get package info
            const packageInfo = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            
            // Get SBOM summary
            let sbomSummary = '';
            try {
              const sbomData = JSON.parse(fs.readFileSync('sbom.spdx.json', 'utf8'));
              const packageCount = sbomData.packages ? sbomData.packages.length : 0;
              sbomSummary = `- **Dependencies analyzed**: ${packageCount} packages`;
            } catch (error) {
              sbomSummary = '- SBOM analysis completed';
            }
            
            // Get build info
            let buildInfo = '';
            try {
              const distFiles = execSync('find dist -type f | head -10', { encoding: 'utf8' }).trim();
              buildInfo = distFiles ? `Built files:\n\`\`\`\n${distFiles}\n\`\`\`` : 'Build completed successfully';
            } catch (error) {
              buildInfo = 'Build completed successfully';
            }
            
            const releaseNotes = `## üöÄ Release ${{ steps.version.outputs.tag }}
            
            ### üì¶ Package Information
            - **Name**: \`${packageInfo.name}\`
            - **Version**: \`${packageInfo.version}\`
            - **License**: ${packageInfo.license || 'Not specified'}
            - **Main**: \`${packageInfo.main || 'Not specified'}\`
            - **Module**: \`${packageInfo.module || 'Not specified'}\`
            - **Types**: \`${packageInfo.types || 'Not specified'}\`
            
            ### üîÑ Changes Since ${previousTag || 'Initial Release'}
            ${commits || 'No changes found'}
            
            ### üèóÔ∏è Build Information
            ${buildInfo}
            
            ### üîí Security & Compliance
            - ‚úÖ SBOM (Software Bill of Materials) included in release assets
            - ‚úÖ Package published with npm provenance
            - ‚úÖ All dependencies scanned and documented
            - ‚úÖ Fresh build from source code (dist not tracked in git)
            ${sbomSummary}
            
            ### üì• Installation
            \`\`\`bash
            # Using npm
            npm install ${packageInfo.name}@${packageInfo.version}
            
            # Using pnpm
            pnpm add ${packageInfo.name}@${packageInfo.version}
            
            # Using yarn
            yarn add ${packageInfo.name}@${packageInfo.version}
            \`\`\`
            
            ### üìã Available Assets
            - üì¶ **Package tarball**: Ready for offline installation
            - üîç **SBOM (SPDX format)**: Complete dependency analysis
            - üîç **SBOM (CycloneDX format)**: Alternative SBOM format
            - üìÑ **SBOM (Text format)**: Human-readable dependency list
            
            ### ‚úÖ Verification
            Verify package integrity and provenance:
            \`\`\`bash
            # Check package signatures
            npm audit signatures
            
            # Verify provenance (requires npm 9.5.0+)
            npm install ${packageInfo.name}@${packageInfo.version} --foreground-scripts
            \`\`\`
            
            ### üõ†Ô∏è Build Environment
            - **Node.js**: 20.x
            - **Package Manager**: pnpm 9.x
            - **Build System**: TypeScript with dual CJS/ESM output
            - **CI/CD**: GitHub Actions with automated testing and security scanning
            - **Fresh Build**: Built from source during release (not pre-built)`;
            
            return releaseNotes;

      - name: Create GitHub Release with Assets
        if: steps.version.outputs.dry_run == 'false'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.version.outputs.tag }}
          name: "Release ${{ steps.version.outputs.tag }}"
          body: ${{ steps.release_notes.outputs.result }}
          draft: false
          prerelease: ${{ steps.version.outputs.prerelease }}
          generateReleaseNotes: false # We're providing our own notes
          makeLatest: ${{ steps.version.outputs.prerelease == 'false' }}
          artifacts: |
            ${{ steps.tarball.outputs.tarball_name }}
            sbom.spdx.json
            sbom.cyclonedx.json
            sbom.txt

      - name: Publish to npm
        if: steps.version.outputs.dry_run == 'false'
        run: |
          if pnpm publish --access public --no-git-checks; then
            echo "‚úÖ Successfully published to npm"
          else
            echo "‚ùå Failed to publish to npm"
            exit 1
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify npm publication
        if: steps.version.outputs.dry_run == 'false'
        run: |
          echo "‚è≥ Waiting for npm propagation..."
          sleep 15
          
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          VERSION="${{ steps.version.outputs.version }}"
          
          if npm view "${PACKAGE_NAME}@${VERSION}" version > /dev/null 2>&1; then
            echo "‚úÖ Package successfully published and available on npm"
            npm view "${PACKAGE_NAME}@${VERSION}" --json | jq -r '.dist.tarball // "Tarball URL not available"'
          else
            echo "‚ö†Ô∏è Package may still be propagating or publication failed"
            exit 1
          fi

      - name: Create build summary
        if: always()
        run: |
          echo "## üìã Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Package Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
          echo "- **Tag**: ${{ steps.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Prerelease**: ${{ steps.version.outputs.prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run**: ${{ steps.version.outputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Process" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Fresh build from source code" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Dependencies installed and cached" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Linting and type checking passed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Build artifacts generated in dist/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Generated Assets" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Package tarball: ${{ steps.tarball.outputs.tarball_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ SBOM (SPDX): sbom.spdx.json" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ SBOM (CycloneDX): sbom.cyclonedx.json" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ SBOM (Text): sbom.txt" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.version.outputs.dry_run }}" = "false" ]; then
            echo "### Published Links" >> $GITHUB_STEP_SUMMARY
            echo "- [üì¶ npm Package](https://www.npmjs.com/package/$(node -p 'require("./package.json").name')/v/${{ steps.version.outputs.version }})" >> $GITHUB_STEP_SUMMARY
            echo "- [üè∑Ô∏è GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Dry Run Mode" >> $GITHUB_STEP_SUMMARY
            echo "- ‚ö†Ô∏è This was a dry run - no actual publishing occurred" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ All build and validation steps completed successfully" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload workflow artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: release-artifacts-${{ steps.version.outputs.version }}
          path: |
            dist/
            ${{ steps.tarball.outputs.tarball_name }}
            sbom.*
            package.json
          retention-days: 90
